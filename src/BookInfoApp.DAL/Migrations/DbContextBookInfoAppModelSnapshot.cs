// <auto-generated />
using System;
using BookInfoApp.DAL.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookInfoApp.DAL.Migrations
{
    [DbContext(typeof(DbContextBookInfoApp))]
    partial class DbContextBookInfoAppModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.AgeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeBegin")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeEnd")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AgeCategories");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.AreaAuthor.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("MiddleName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SurName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.AreaAuthor.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.AreaGenre.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "GuidId");

                    b.HasIndex("GuidId");

                    b.ToTable("BookGenres");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.AreaGenre.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgeCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(5000)")
                        .HasMaxLength(5000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("YearOfWriting")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgeCategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.InputWork", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "WorkId");

                    b.HasIndex("WorkId");

                    b.ToTable("InputWorks");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaPublisher.BookPublisher", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearOfPublishing")
                        .HasColumnType("integer");

                    b.HasKey("BookId", "PublisherId");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookPublishers");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaPublisher.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaPublisher.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.AreaAuthor.BookAuthor", b =>
                {
                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.AreaAuthor.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.AreaGenre.BookGenre", b =>
                {
                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.AreaGenre.Genre", "Genre")
                        .WithMany("BookGenras")
                        .HasForeignKey("GuidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.Book", b =>
                {
                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.AgeCategory", "AgeCategory")
                        .WithMany("Books")
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaBook.InputWork", b =>
                {
                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.Book", "Book")
                        .WithMany("BookForConnectInputWorks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.Book", "Work")
                        .WithMany("InputWorks")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookInfoApp.Core.Entities.AreaPublisher.BookPublisher", b =>
                {
                    b.HasOne("BookInfoApp.Core.Entities.AreaBook.Book", "Book")
                        .WithMany("BookPublishers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoApp.Core.Entities.AreaPublisher.CoverType", "CoverType")
                        .WithMany("BookPublishers")
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoApp.Core.Entities.AreaPublisher.Publisher", "Publisher")
                        .WithMany("BookPublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
